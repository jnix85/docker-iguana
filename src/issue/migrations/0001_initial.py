# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-07-14 07:44
from __future__ import unicode_literals

import common.validators
import datetime
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import issue.models
import search.fieldcheckings


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seqnum', models.IntegerField(default=-1, editable=False, verbose_name='Attachment number')),
                ('file', models.FileField(max_length=256, upload_to=issue.models.get_upload_path, verbose_name='File')),
                ('when', models.DateTimeField(default=django.utils.timezone.now, editable=False, validators=[common.validators.date_is_present_or_future], verbose_name='Uploaded at')),
            ],
            options={
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
                'ordering': ['when'],
            },
            bases=(search.fieldcheckings.SearchableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seqnum', models.IntegerField(default=-1, editable=False, verbose_name='Comment number')),
                ('when', models.DateTimeField(default=django.utils.timezone.now, editable=False, validators=[common.validators.date_is_present_or_future], verbose_name='Created at')),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('text', models.TextField(verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'ordering': ['when'],
            },
            bases=(search.fieldcheckings.SearchableMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('number', models.IntegerField(default=-1, editable=False, verbose_name='Ticket number')),
                ('type', models.CharField(choices=[('Bug', 'Bug'), ('Story', 'Story'), ('Task', 'Task')], default='Task', max_length=5, verbose_name='Type')),
                ('due_date', models.DateField(blank=True, null=True, validators=[common.validators.date_is_present_or_future], verbose_name='Due Date')),
                ('priority', models.IntegerField(choices=[(0, 'Unimportant'), (1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], default=2, verbose_name='Priority')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('storypoints', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Enter a positive storypoints amount!')], verbose_name='Story Points')),
                ('nextCommentId', models.IntegerField(default=1, editable=False, verbose_name='Next comment ID')),
                ('nextAttachmentId', models.IntegerField(default=1, editable=False, verbose_name='Next attachment ID')),
                ('nextTimelogId', models.IntegerField(default=1, editable=False, verbose_name='Next Timelog ID')),
                ('was_in_sprint', models.BooleanField(default=False, editable=False, verbose_name='was in a sprint')),
                ('archived', models.BooleanField(default=False, editable=False, verbose_name='archived')),
                ('logged_total', models.DurationField(default=datetime.timedelta(0), verbose_name='Logged time')),
            ],
            options={
                'verbose_name': 'issue',
                'verbose_name_plural': 'issues',
                'base_manager_name': 'objects',
                'ordering': ['number'],
            },
            bases=(search.fieldcheckings.SearchableMixin, models.Model),
        ),
    ]
